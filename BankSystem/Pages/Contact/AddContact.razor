@attribute [Authorize]
@page "/Contact/AddContact/"
@using BankSystem.Data
@using BankSystem.CustomModel
@inject IStringLocalizer<App> Localizer
@inject IJSRuntime JSRuntime
@inject BankSystem.IService.IContactService ContactService
@inject BankSystem.IService.IBankService BankService
@inject BankSystem.IService.IAgencyService AgencyService
@inject NavigationManager NavigationManager
@inject NotificationService notificationService
<div class="titleicon">
    <span class="oi oi-phone" aria-hidden="true"></span>
    <h1>@Localizer["CreateContact"]</h1>
</div>
<hr />
<RadzenNotification />
<RadzenCard>
    <AuthorizeView Context="authContext">
        <Authorized>
            <EditForm Model="@NewContact" OnValidSubmit="CreateContact" Context="formContext">
                <DataAnnotationsValidator />

                <div class="col-md-4">
                    <div class="form-group">
                        <label for="ContactName" class="control-label">@Localizer["ContactName"]</label>
                        <InputText for="ContactName" class="form-control" @bind-Value="@NewContact.ContactName"></InputText>

                    </div>
                    <div class="form-group">
                        <label for="Mobile" class="control-label">@Localizer["Mobile"]</label>
                        <InputText for="Mobile" class="form-control" @bind-Value="@NewContact.Mobile"></InputText>

                    </div>

                    <div class="form-group">
                        <label asp-for="ContactType" class="control-label">@Localizer["ContactType"]</label>
                        <RadzenDropDown AllowClear="true"
                                        TValue="int"
                                        FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                        FilterOperator="StringFilterOperator.Contains"
                                        AllowFiltering="true"
                                        Data="@localizedcontactTypeEnums"
                                        TextProperty="Name"
                                        ValueProperty="Value"
                                        Style="margin-bottom: 20px"
                                        Change="@(args => ChangeType(args))"
                                        @bind-Value="@NewContact.ContactType"
                                        class="form-control" />
                    </div>
                    @if (SelectedContactType == 2)
                    {
                <div class="form-group">
                    <label asp-for="BankId" class="control-label">@Localizer["Banks"] </label>
                    <RadzenDropDown AllowClear="true"
                                    TValue="int"
                                    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                    FilterOperator="StringFilterOperator.Contains"
                                    AllowFiltering="true"
                                    Data="@AllBanks"
                                    TextProperty="BankName"
                                    ValueProperty="Id"
                                    Style="margin-bottom: 20px"
                                    Change="@(args => Change(args))"
                                    @bind-Value="@NewContact.BankId"
                                    class="form-control" />
                   ]
                </div>
                    }
                    @if (SelectedContactType == 3)
                    {
                        <div class="form-group">
                            <label asp-for="AgencyId" class="control-label">@Localizer["Agencies"]</label>
                            <RadzenDropDown AllowClear="true"
                                            TValue="int"
                                            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                            FilterOperator="StringFilterOperator.Contains"
                                            AllowFiltering="true"
                                            Data="@AllAgencies"
                                            TextProperty="AgencyName"
                                            ValueProperty="Id"
                                            Style="margin-bottom: 20px"
                                            Change="@(args => Change(args))"
                                            @bind-Value="@NewContact.AgencyId"
                                            class="form-control" />
                        </div>
                    }
                    <div class="form-group">
                        <button type="submit" class="btn btn-default">@Localizer["Save"]</button>
                        <button class="btn" type="button" @onclick="() => cancel()">@Localizer["Cancel"]</button>
                    </div>

                </div>
            </EditForm>
        </Authorized>
    </AuthorizeView>
</RadzenCard>


@code {
    Contact NewContact = new Contact();
    List<Bank> AllBanks = new List<Bank>();
    List<Agency> AllAgencies = new List<Agency>();
    List<ContactTypeEnum> contactTypeEnums = new List<ContactTypeEnum>();
    List<ContactTypeEnum> localizedcontactTypeEnums = new List<ContactTypeEnum>();
    int SelectedContactType;
    // string ValidationClass = "";
    List<CustomEnumModel> ContactTypes = new List<CustomEnumModel>();
    protected override async Task OnInitializedAsync()
    {
        AllBanks = await Task.Run(() => BankService.GetBanks());
        AllAgencies = await Task.Run(() => AgencyService.GetAgencies());
        contactTypeEnums = await Task.Run(() => ContactService.GetContactsEnum());

        foreach (var item in contactTypeEnums)
        {
            localizedcontactTypeEnums.Add(new ContactTypeEnum { Name = Localizer[item.Name], Id = item.Id, Value = item.Value });
        }

    }
    protected async Task CreateContact()
    {


        bool isValid = CheckValidation(NewContact);

        if (isValid)
        {


            var Returned = ContactService.AddContact(NewContact);
            if (await Returned)
            {
                ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = Localizer["Success"], Duration = 4000 });
                NavigationManager.NavigateTo("Contact/Contacts/", true);
            }
            else
            {
                ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = Localizer["Error"], Duration = 4000 });
            }
        }

    }


    bool CheckValidation(Contact NewContact)
    {



        if (NewContact.ContactType == 2 && NewContact.BankId == 0)
        {
            ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Info, Summary = Localizer["ChooseBank"], Duration = 4000 });
            return false;
        }
        else if (NewContact.ContactType == 3 && NewContact.AgencyId == 0)
        {
            ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Info, Summary = Localizer["ChooseAgency"], Duration = 4000 });
            return false;
        }
        else
        {
            return true;
        }
    }

    void cancel()
    {
        NavigationManager.NavigateTo("Contact/Contacts/", true);
    }
    void ChangeType(object value)
    {
        SelectedContactType = (int)value;

    }
    void Change(object value)
    {
        var str = value is IEnumerable<object> ? string.Join(", ", (IEnumerable<object>)value) : value;


    }
    void ShowNotification(NotificationMessage message)
    {
        notificationService.Notify(message);

    }
}